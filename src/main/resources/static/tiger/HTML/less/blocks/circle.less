.round-counter-single {
  position: relative;
  text-align: center;


  @media screen and (max-width: @screen-md) {
        maring-bottom: 40px;

      }
}





















// mixins
.rotate(@rotation) {
    -webkit-transform: rotate(@rotation);
    -moz-transform: rotate(@rotation);
    -ms-transform: rotate(@rotation);
    -o-transform: rotate(@rotation);
    transform: rotate(@rotation);
}

.box-sizing(@box-sizing) {
    -webkit-box-sizing: @box-sizing;
    -moz-box-sizing: @box-sizing;
    box-sizing: @box-sizing;
}
.transition-property(@transition) {
    -webkit-transition-property: @transition;
    -moz-transition-property: @transition;
    -o-transition-property: @transition;
    transition-property: @transition;
}

.transition-duration(@duration) {
    -webkit-transition-duration: @duration;
    -moz-transition-duration: @duration;
    -o-transition-duration: @duration;
    transition-duration: @duration;
}

.transition-timing-function(@timing){
    -webkit-transition-timing-function: @timing;
    -moz-transition-timing-function: @timing;
    -o-transition-timing-function: @timing;
    transition-timing-function: @timing;
}




// VARS
@circle-width: 0.06em;
@circle-width-hover: 0.04em;

// colors default






// colors dark skin



// CIRCLE
// classes 2 extend
.rect-auto {
    clip: rect(auto, auto, auto, auto);
}

.pie {
    position: absolute;
    border: @circle-width solid @uou-primary-color;
    width: 1 - (2 * @circle-width);
    height: 1 - (2 * @circle-width);
    clip: rect(0em, 0.5em, 1em, 0em);
    border-radius: 50%;
    .rotate(0deg);
}

.pie-fill {
    .rotate(180deg);
}

// main
.c100 {

    *, *:before, *:after {
        .box-sizing(content-box);
    }

    position: relative;
    font-size: 120px;
    width: 1em;
    height: 1em;
    border-radius: 50%;

    background-color: @uou-tertiary-color;
    margin: 0 auto;

    // center circle to its parent
    &.center{
        float: none;
        margin: 0 auto;
    }

    // bigger size
    &.big{
        font-size: 240px;
    }

    // smaller size
    &.small{
        font-size: 90px;
    }

    // centered value inside circle
    > span {
        position: absolute;
        width: 100%;
        z-index: 1;
        left: 0;
        top: 0;
        width: 5em;
        line-height: 5em;
        font-size: 0.2em;
        color: @uou-text-color;
        display: block;
        text-align: center;
        white-space: nowrap;
        .transition-property(all);
        .transition-duration(0.2s);
        .transition-timing-function(ease-out);
        font-weight: bold;
        font-family: @uou-font-family-sb;

        b {
          color: @uou-primary-color;
        }

    }

    // background inside the circle
    &:after{
        position: absolute;
        top: @circle-width;
        left: @circle-width;
        display: block;
        content: " ";
        border-radius: 50%;
        background-color: #fff;
        width: 1 - (2 * @circle-width);
        height: 1 - (2 * @circle-width);
        .transition-property(all);
        .transition-duration(0.2s);
        .transition-timing-function(ease-in);
    }

    // the slice (mask)
    .slice {
        position: absolute;
        width: 1em;
        height: 1em;
        clip: rect(0em, 1em, 1em, 0.5em);
    }

    // circle to show the status
    .bar {
        &:extend(.pie);
    }

    // loop to create all needed elements automatically
    .generate-elements(@n, @i: 1) when (@i =< @n) {
        &.p@{i} {
            & .slice {
                &:extend(.rect-auto);
            }
            & .bar:after{
                &:extend(.pie-fill);
            }
            & .fill{
                &:extend(.pie);
                &:extend(.pie-fill);
            }
        }
        .generate-elements(@n, (@i + 1));
    }
    // loop to rotate all 100 circles
    .generate-rotation(@n, @i: 1) when (@i =< @n) {
        &.p@{i} .bar {
            @degs: (360/100*@i);
            .rotate(~"@{degs}deg");
        }
        .generate-rotation(@n, (@i + 1));
    }

    .generate-elements(100, 51);
    .generate-rotation(100, 1);

    // hover styles
    &:hover{

        cursor: default;

        > span {
            width: 3.33em;
            line-height: 3.33em;
            font-size: 0.3em;
            color: @uou-primary-color;
        }

        &:after{
            top: @circle-width-hover;
            left: @circle-width-hover;
            width: 1 - (2 * @circle-width-hover);
            height: 1 - (2 * @circle-width-hover);
        }
    }

    // override colors for the dark skin


    // green skin
    &.green{

        .bar, .fill { border-color: @uou-primary-color !important;}

        &:hover{
            > span { color: @uou-primary-color;}
        }
    }


}
